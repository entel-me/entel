// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")
  last_latitude  Float?
  last_longitude Float?

  tokens   Token[]
  sessions Session[]

  createdList      Shoppinglist[] @relation("createdList")
  acceptedList     Shoppinglist[] @relation("acceptedList")
  sentMessages     Message[]      @relation("sentMessage")
  receivedMessages Message[]      @relation("receivedMessage")
  participatesIn   Chat[]         @relation("participatesIn")

  hasRead AdminMessage[] @relation("wasReadBy")
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

model TokenMailVerification {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  hashedToken    String
  type           String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt      DateTime
  sentTo         String
  hashedPassword String
  name           String

  @@unique([hashedToken, type])
}

model Shoppinglist {
  id      Int    @id @default(autoincrement())
  store   String
  comment String
  status  Int

  createdBy  User  @relation("createdList", fields: [creatorId], references: [id])
  creatorId  Int
  acceptedBy User? @relation("acceptedList", fields: [acceptorId], references: [id])
  acceptorId Int?

  items Item[] @relation("includedItems")

}

model Item {
  id   Int    @id @default(autoincrement())
  name String

  listedIn Shoppinglist @relation("includedItems", fields: [listId], references: [id])
  listId   Int
}

model Message {
  id      Int      @id @default(autoincrement())
  sentAt  DateTime @default(now())
  content String
  wasRead Boolean  @default(false)

  sentFrom   User @relation("sentMessage", fields: [sentFromId], references: [id])
  sentFromId Int

  sentTo   User @relation("receivedMessage", fields: [sentToId], references: [id])
  sentToId Int

  sentIn   Chat @relation("messageIn", fields: [sentInId], references: [id])
  sentInId Int
}

model Chat {
  id Int @id @default(autoincrement())

  adminMessages      AdminMessage[] @relation("adminMessageIn")
  messages           Message[]      @relation("messageIn")
  participatingUsers User[]         @relation("participatesIn")
}

model AdminMessage {
  id      Int      @id @default(autoincrement())
  sentAt  DateTime @default(now())
  content String

  sentIn    Chat   @relation("adminMessageIn", fields: [sentInId], references: [id])
  sentInId  Int
  wasReadBy User[] @relation("wasReadBy")
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgresql
// enum TokenType {
//   RESET_PASSWORD
// }
